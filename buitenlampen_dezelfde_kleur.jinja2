{# 
    'input_text.dag_vandaag_kleuren' bevat een waarde (bijv. Groen;Verde;Berde;Green;Krien;00FF00). Controleer met behulp van een reguliere expressie of de lampen in de tuin dezelfde kleur hebben.
    Als een lamp uitstaat, wordt dat gezien als dezelfde kleur. Hierdoor ontstaat een verwachte waarde van '1111', waardoor een voorwaarde ingesteld kan worden voor een knop om lampen te kleuren.
    De code is nog niet helemaal opgeschoond en bevat wat overbodige code.
    Kleurcodes worden omgezet worden van hex naar rgb.
    Het blijkt dat de lampen de kleuren niet altijd netjes overzetten van hex naar rgb. (bijv. '00FF00' -> '0,255,1') Daarom heb ik een foutmarge ingesteld.
#}

{% set kleuren = states('input_text.dag_vandaag_kleuren') %}
{%- set pattern = state_attr('input_text.dag_vandaag_kleuren', 'pattern') %}
{%- set kleur_hex = (kleuren | regex_findall_index(pattern)) if kleuren else [] %}
{%- set tolerance = 5 %} {# Foutmarge omdat rgb-kleur niet volledig overeenkomt met hex-kleur. #}

{%- if kleur_hex | length > 5 %}
    {%- set kleur_hex = kleur_hex[5] | lower %}
    {%- set rgb_color = [
        (kleur_hex[0:2] | int(kleur_hex[0:2], 16)),
        (kleur_hex[2:4] | int(kleur_hex[2:4], 16)),
        (kleur_hex[4:6] | int(kleur_hex[4:6], 16))
    ] %}
    
    {%- set specifieke_lampen = [
        'light.achtertuin_grondlampen',
        'light.achtertuin_schutting',
        'light.achtertuin_schuur',
        'light.voortuin_voordeur'
    ] %}
    
    {%- for lamp in specifieke_lampen %}
      {%- set lamp_rgb_color = state_attr(lamp, 'rgb_color') %}
      {%- set lamp_state = states(lamp) %}      
      {%- if lamp_state == 'off' %}
        {{- 1 -}}
      {%- elif lamp_rgb_color is not none and 
          (lamp_rgb_color[0] >= rgb_color[0] - tolerance and lamp_rgb_color[0] <= rgb_color[0] + tolerance) and 
          (lamp_rgb_color[1] >= rgb_color[1] - tolerance and lamp_rgb_color[1] <= rgb_color[1] + tolerance) and 
          (lamp_rgb_color[2] >= rgb_color[2] - tolerance and lamp_rgb_color[2] <= rgb_color[2] + tolerance) %}
        {{- 1 -}}
      {%- endif %}
    {%- endfor %}
{%- else %}
0
{% endif %}